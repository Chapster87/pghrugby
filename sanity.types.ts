/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ButtonGroup = {
  _type: "buttonGroup"
  buttons?: Array<
    {
      _key: string
    } & Button
  >
}

export type Button = {
  _type: "button"
  text?: string
  url?: string
  style?: string
  target?: "_self" | "_blank"
  rel?: string
}

export type Settings = {
  _id: string
  _type: "settings"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal"
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  ogImage?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    metadataBase?: string
    _type: "image"
  }
}

export type Product = {
  _id: string
  _type: "product"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  specs?: Array<{
    lang?: string
    title?: string
    content?: string
    _type: "spec"
    _key: string
  }>
  addons?: {
    title?: string
    products?: Array<{
      _ref: string
      _type: "reference"
      _weak?: boolean
      _key: string
      [internalGroqTypeReferenceTo]?: "product"
    }>
  }
}

export type PortableText = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: "span"
        _key: string
      }>
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
      listItem?: "bullet" | "number"
      markDefs?: Array<{
        href?: string
        _type: "link"
        _key: string
      }>
      level?: number
      _type: "block"
      _key: string
    }
  | ({
      _key: string
    } & BlockGroup)
  | {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      _type: "imageWithCaption"
      _key: string
    }
  | ({
      _key: string
    } & MediaText)
  | ({
      _key: string
    } & Columns)
  | ({
      _key: string
    } & Button)
  | ({
      _key: string
    } & ButtonGroup)
>

export type MediaText = {
  _type: "mediaText"
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  text?: PortableText
}

export type ImageWithCaption = {
  _type: "imageWithCaption"
  asset?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
  }
  media?: unknown
  hotspot?: SanityImageHotspot
  crop?: SanityImageCrop
  caption?: string
}

export type Tag = {
  _id: string
  _type: "tag"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
}

export type Post = {
  _id: string
  _type: "post"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  date?: string
  modified?: string
  status?:
    | "publish"
    | "future"
    | "draft"
    | "pending"
    | "private"
    | "trash"
    | "auto-draft"
    | "inherit"
  content?: PortableText
  excerpt?: PortableText
  featuredMedia?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  sticky?: boolean
  author?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "author"
  }
  categories?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "category"
  }>
  tags?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "tag"
  }>
}

export type Page = {
  _id: string
  _type: "page"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  date?: string
  modified?: string
  status?:
    | "publish"
    | "future"
    | "draft"
    | "pending"
    | "private"
    | "trash"
    | "auto-draft"
    | "inherit"
  content?: PortableText
  excerpt?: PortableText
  featuredMedia?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  author?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "author"
  }
}

export type Column = {
  _type: "column"
  content?: PortableText
}

export type Columns = {
  _type: "columns"
  columns?: Array<
    {
      _key: string
    } & Column
  >
}

export type Category = {
  _id: string
  _type: "category"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
}

export type BlockGroup = {
  _type: "blockGroup"
  children?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: "span"
          _key: string
        }>
        style?:
          | "normal"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "blockquote"
        listItem?: "bullet" | "number"
        markDefs?: Array<{
          href?: string
          _type: "link"
          _key: string
        }>
        level?: number
        _type: "block"
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: "reference"
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: "image"
        _key: string
      }
    | ({
        _key: string
      } & ImageWithCaption)
    | ({
        _key: string
      } & MediaText)
    | ({
        _key: string
      } & Columns)
    | ({
        _key: string
      } & Button)
    | ({
        _key: string
      } & ButtonGroup)
  >
}

export type Author = {
  _id: string
  _type: "author"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  url?: string
  description?: string
  avatar?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
}

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch"
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: "sanity.imagePalette"
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions"
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot"
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: "sanity.imageCrop"
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: "sanity.fileAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: "sanity.imageAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata"
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: "geopoint"
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: "slug"
  current?: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData"
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | ButtonGroup
  | Button
  | Settings
  | Product
  | PortableText
  | MediaText
  | ImageWithCaption
  | Tag
  | Post
  | Page
  | Column
  | Columns
  | Category
  | BlockGroup
  | Author
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/app/[slug]/page.tsx
// Variable: query
// Query: *[_type == "page" && slug.current == $slug][0]{title}
export type QueryResult = {
  title: string | null
} | null

// Source: ./src/app/posts/[slug]/posts.query.ts
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content[]{    ...,    markDefs[]{      ...,        _type == "link" => {    "post": post->slug.current  }    }  },      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type PostQueryResult = {
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: "span"
          _key: string
        }>
        style?:
          | "blockquote"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "normal"
        listItem?: "bullet" | "number"
        markDefs: Array<{
          href?: string
          _type: "link"
          _key: string
          post: null
        }> | null
        level?: number
        _type: "block"
        _key: string
      }
    | {
        _key: string
        _type: "blockGroup"
        children?: Array<
          | ({
              _key: string
            } & Button)
          | ({
              _key: string
            } & ButtonGroup)
          | ({
              _key: string
            } & Columns)
          | ({
              _key: string
            } & ImageWithCaption)
          | ({
              _key: string
            } & MediaText)
          | {
              children?: Array<{
                marks?: Array<string>
                text?: string
                _type: "span"
                _key: string
              }>
              style?:
                | "blockquote"
                | "h1"
                | "h2"
                | "h3"
                | "h4"
                | "h5"
                | "h6"
                | "normal"
              listItem?: "bullet" | "number"
              markDefs?: Array<{
                href?: string
                _type: "link"
                _key: string
              }>
              level?: number
              _type: "block"
              _key: string
            }
          | {
              asset?: {
                _ref: string
                _type: "reference"
                _weak?: boolean
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
              }
              media?: unknown
              hotspot?: SanityImageHotspot
              crop?: SanityImageCrop
              _type: "image"
              _key: string
            }
        >
        markDefs: null
      }
    | {
        _key: string
        _type: "button"
        text?: string
        url?: string
        style?: string
        target?: "_blank" | "_self"
        rel?: string
        markDefs: null
      }
    | {
        _key: string
        _type: "buttonGroup"
        buttons?: Array<
          {
            _key: string
          } & Button
        >
        markDefs: null
      }
    | {
        _key: string
        _type: "columns"
        columns?: Array<
          {
            _key: string
          } & Column
        >
        markDefs: null
      }
    | {
        asset?: {
          _ref: string
          _type: "reference"
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: "image"
        _key: string
        markDefs: null
      }
    | {
        asset?: {
          _ref: string
          _type: "reference"
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        _type: "imageWithCaption"
        _key: string
        markDefs: null
      }
    | {
        _key: string
        _type: "mediaText"
        image?: {
          asset?: {
            _ref: string
            _type: "reference"
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
          }
          media?: unknown
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: "image"
        }
        text?: PortableText
        markDefs: null
      }
  > | null
  _id: string
  status: "draft" | "published"
  title: string | "Untitled"
  slug: string | null
  excerpt: PortableText | null
  coverImage: null
  date: string
  author: {
    firstName: null
    lastName: null
    picture: null
  } | null
} | null
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string | null
}>

// Query TypeMap
import "@sanity/client"
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "page" && slug.current == $slug][0]{title}': QueryResult
    '\n  *[_type == "post" && slug.current == $slug] [0] {\n    content[]{\n    ...,\n    markDefs[]{\n      ...,\n      \n  _type == "link" => {\n    "post": post->slug.current\n  }\n\n    }\n  },\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': PostQueryResult
    '\n  *[_type == "post" && defined(slug.current)]\n  {"slug": slug.current}\n': PostPagesSlugsResult
  }
}
